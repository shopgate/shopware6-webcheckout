{
  "info": {
    "_postman_id": "3135975b-74a4-4cfe-af90-4074dd4d214c",
    "name": "SW6 SG Webcheckout - v2",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "5289226"
  },
  "item": [
    {
      "name": "init",
      "item": [
        {
          "name": "System",
          "item": [
            {
              "name": "SWA: get channel key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "var jsonData = pm.response.json();\r",
                      "const storeFront = jsonData.data.find((channel) => channel.name === 'Storefront')\r",
                      "\r",
                      "pm.test(\"Has id\", function () {\r",
                      "    pm.expect(storeFront).not.be.undefined;\r",
                      "    pm.expect(storeFront.id).to.be.a('string');\r",
                      "    pm.environment.set(\"gen_salesChannel_id\", storeFront.id);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Has access key\", function () {\r",
                      "    pm.expect(storeFront).not.be.undefined;\r",
                      "    pm.expect(storeFront.accessKey).to.be.a('string');\r",
                      "    pm.environment.set(\"gen_accessKey\", storeFront.accessKey);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"includes\": {\r\n        \"sales_channel\": [\"id\", \"name\", \"accessKey\"]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/sales-channel",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "sales-channel"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SW: get SW version",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"get SW version\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.version).to.be.a('string');\r",
                      "    pm.environment.set(\"gen_shopware_version\", jsonData.version);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_api}}/_info/config",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_info",
                    "config"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Rules",
          "item": [
            {
              "name": "SWA: check & get rules",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Is Shopgate Webchekout rule\", function () {\r",
                      "    const isShopgateWebcheckoutRule = Utility.getByName(jsonData.data, 'Is Shopgate Webcheckout');\r",
                      "    pm.expect(isShopgateWebcheckoutRule).to.have.ownProperty('id');\r",
                      "    pm.expect(isShopgateWebcheckoutRule.id,'Is Shopgate Webcheckout rule has correct id').to.eql(pm.environment.get(\"default_rule_isShopgateWebcheckout_id\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Cart >= 0 rule\", function () {\r",
                      "    const cartRule = Utility.getByName(jsonData.data, 'Cart >= 0');\r",
                      "    pm.expect(cartRule).to.have.ownProperty('id');\r",
                      "    pm.environment.set(\"gen_rule_cartGreaterThan0_id\", cartRule.id);\r",
                      "});\r",
                      "\r",
                      "function getByName(name) {\r",
                      "    return jsonData.data.find(rule => rule.name === name);\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"multi\",\r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Is Shopgate Webcheckout\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Cart >= 0\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"includes\": {\r\n        \"rule\": [\r\n            \"id\",\r\n            \"name\"\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/rule",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "rule"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Promo / Coupons",
          "item": [
            {
              "name": "SWA: create isShoopgate promo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created entity successfully\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"{{created_isSg_code_promo_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API: isShopgateWebC code promo\",\r\n    \"code\": \"{{created_isSg_code_promo_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 2.41\r\n        }\r\n    ],\r\n    \"salesChannels\":[\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/promotion",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "promotion"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SWA: add isShopgate rule to promo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created entity successfully\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"promotionId\": \"{{created_isSg_code_promo_id}}\",\r\n    \"ruleId\": \"{{default_rule_isShopgateWebcheckout_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/promotion-cart-rule",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "promotion-cart-rule"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SWA: check promo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Created entity successfully\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check condition applied to Promo\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data).to.not.be.empty;\r",
                      "    pm.expect(jsonData.data[0]).to.haveOwnProperty('id').to.eq(pm.environment.get('default_rule_isShopgateWebcheckout_id'));\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_api}}/promotion/:promoId/cartRules",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "promotion",
                    ":promoId",
                    "cartRules"
                  ],
                  "variable": [
                    {
                      "key": "promoId",
                      "value": "{{created_isSg_code_promo_id}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Shipping",
          "item": [
            {
              "name": "SWA: find all shipping",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Check express\", function () {\r",
                      "    const express = Utility.getByName(jsonData.data, 'Express');\r",
                      "    pm.expect(express, 'expected Express ship method to exist').to.not.be.undefined;\r",
                      "    pm.environment.set(\"gen_shippingMethod_express\", express.id);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check standard\", function () {\r",
                      "    const standard = Utility.getByName(jsonData.data, 'Standard');\r",
                      "    pm.expect(standard, 'expected Standard ship method to exist').to.not.be.undefined;\r",
                      "    pm.environment.set(\"gen_shippingMethod_standard\", standard.id);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"includes\": {\r\n        \"shipping_method\": [\r\n            \"id\",\r\n            \"name\"\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/search/shipping-method",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "search",
                    "shipping-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SWA: update rule IDs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// marked as temp because of ticket SGSW6-88\r",
                      "pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "accept": true
                }
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{gen_access_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"update-shipping-method\": {\r\n        \"entity\": \"shipping_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{gen_shippingMethod_express}}\",\r\n                \"availabilityRuleId\": \"{{gen_rule_cartGreaterThan0_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{gen_shippingMethod_standard}}\",\r\n                \"availabilityRuleId\": \"{{gen_rule_cartGreaterThan0_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_endpoint_api}}/_action/sync",
                  "host": [
                    "{{sw_endpoint_api}}"
                  ],
                  "path": [
                    "_action",
                    "sync"
                  ]
                },
                "description": "Supposed to be a temp solution until Shopware fixes an issue with their rule assignment when installing sample data. Sometimes a shipping can be assigned a rule that renders in \"invalid\" during our tests."
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Extend Session",
      "item": [
        {
          "name": "Fetch customer context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Check that context token session is extended\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.token).to.be.a('string');\r",
                  "    pm.expect(jsonData.token).to.eq(pm.environment.get(\"migration_user_contextToken\"));\r",
                  "    pm.expect(jsonData.customer,'Customer should be still logged in').to.haveOwnProperty('id');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "(Required) Content type of the request"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "(Required) Accepted response content types"
              },
              {
                "key": "shopgate-check",
                "value": "1",
                "description": "required to extend expired sessions",
                "type": "text"
              },
              {
                "key": "sw-context-token",
                "value": "{{migration_user_contextToken}}",
                "description": "migration created token that expired",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_store_api}}/context",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "context"
              ]
            },
            "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
          },
          "response": []
        },
        {
          "name": "Fetch guest context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Check that context token session is extended\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.token).to.be.a('string');\r",
                  "    pm.expect(jsonData.token).to.eq(pm.environment.get(\"migration_guest_contextToken\"));\r",
                  "    pm.expect(jsonData.customer).to.eql(null);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "(Required) Content type of the request"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "(Required) Accepted response content types"
              },
              {
                "key": "shopgate-check",
                "value": "1",
                "description": "required to extend expired sessions",
                "type": "text"
              },
              {
                "key": "sw-context-token",
                "value": "{{migration_guest_contextToken}}",
                "description": "migration created token that expired",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_store_api}}/context",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "context"
              ]
            },
            "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
          },
          "response": []
        }
      ],
      "description": "SW6M-39 & SW6M-68 tests whether a session can be extended by calling the default API endpoints for customer & guests",
      "auth": {
        "type": "apikey",
        "apikey": [
          {
            "key": "value",
            "value": "{{gen_accessKey}}",
            "type": "string"
          },
          {
            "key": "key",
            "value": "sw-access-key",
            "type": "string"
          }
        ]
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "logged in",
      "item": [
        {
          "name": "guest (3), cust (0)",
          "item": [
            {
              "name": "Fetch the current context",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string');\r",
                      "    pm.environment.set(\"gen_contextToken\", jsonData.token);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/context",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "context"
                  ]
                },
                "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
              },
              "response": []
            },
            {
              "name": "Add items to the cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n \"items\": [\n    {\n      \"referencedId\": \"2a88d9b59d474c7e869d8071649be43c\",\n      \"quantity\": 3,\n      \"type\": \"product\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/checkout/cart/line-item",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "checkout",
                    "cart",
                    "line-item"
                  ]
                },
                "description": "This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.\n\nExample: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)"
              },
              "response": []
            },
            {
              "name": "Log in a customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    pm.response.to.have.header(\"Sw-Context-Token\");\r",
                      "    pm.environment.set(\"gen_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/account/login",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "account",
                    "login"
                  ]
                },
                "description": "Logs in customers given their credentials."
              },
              "response": []
            },
            {
              "name": "get sg login token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Has token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string')\r",
                      "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                      "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login",
                    "token"
                  ]
                },
                "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
              },
              "response": [
                {
                  "name": "bad secret error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "description": "(Required) Content type of the request"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "description": "(Required) Accepted response content types"
                      },
                      {
                        "key": "sw-context-token",
                        "value": "{{gen_contextToken}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                      "host": [
                        "{{sw_store_api}}"
                      ],
                      "path": [
                        "sgwebcheckout",
                        "login",
                        "token"
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Date",
                      "value": "Sat, 26 Mar 2022 11:53:37 GMT"
                    },
                    {
                      "key": "Server",
                      "value": "Apache/2.4.46 (Unix) OpenSSL/1.0.2u PHP/7.4.12 mod_wsgi/3.5 Python/2.7.13 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.11 Perl/v5.30.1"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "PHP/7.4.12"
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache, private"
                    },
                    {
                      "key": "Access-Control-Allow-Origin",
                      "value": "*"
                    },
                    {
                      "key": "Access-Control-Allow-Methods",
                      "value": "GET,POST,PUT,PATCH,DELETE"
                    },
                    {
                      "key": "Access-Control-Allow-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "Access-Control-Expose-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "sw-context-token",
                      "value": "0XC8rfRCsrjLNEpRrsaxoe28OvRLLNGd"
                    },
                    {
                      "key": "x-frame-options",
                      "value": "deny"
                    },
                    {
                      "key": "X-Debug-Token",
                      "value": "52f720"
                    },
                    {
                      "key": "X-Debug-Token-Link",
                      "value": "http://localhost:7777/_profiler/52f720"
                    },
                    {
                      "key": "X-Robots-Tag",
                      "value": "noindex"
                    },
                    {
                      "key": "Connection",
                      "value": "close"
                    },
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"errors\": [\n        {\n            \"code\": \"9\",\n            \"status\": \"500\",\n            \"title\": \"Internal Server Error\",\n            \"detail\": \"Invalid secret.\",\n            \"meta\": {\n                \"trace\": [],\n                \"file\": \"vendor/rbdwllr/reallysimplejwt/src/Build.php\",\n                \"line\": 121\n            }\n        }\n    ]\n}"
                }
              ]
            },
            {
              "name": "Frontend login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Load the HTML response to $\r",
                      "const pkg = require('cheerio')\r",
                      "const $ = pkg.load(pm.response.text());\r",
                      "\r",
                      "pm.test(\"Check cart page\", function () {\r",
                      "    const totals = $('.hidden-line-items-information')\r",
                      "    const lineItem = $('.hidden-line-item')\r",
                      "    pm.expect(totals).to.be.not.undefined;\r",
                      "    pm.expect(lineItem).to.be.not.undefined;\r",
                      "    pm.expect(lineItem.attr('data-quantity')).to.eq('3')\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check we are in cart confirm page\", function () {\r",
                      "    const bodyClass = $('.is-ctl-checkout.is-act-confirmpage')\r",
                      "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{gen_login_token}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Frontend login",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}",
                      "host": [
                        "{{sw_endpoint_frontend}}"
                      ],
                      "path": [
                        "sgwebcheckout",
                        "login"
                      ],
                      "query": [
                        {
                          "key": "token",
                          "value": "{{gen_login_token}}"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "html",
                  "header": [
                    {
                      "key": "Date",
                      "value": "Mon, 28 Mar 2022 10:00:05 GMT"
                    },
                    {
                      "key": "Server",
                      "value": "Apache/2.4.46 (Unix) OpenSSL/1.0.2u PHP/7.4.12 mod_wsgi/3.5 Python/2.7.13 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.11 Perl/v5.30.1"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "PHP/7.4.12"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "session-=1cscrpqsidkphomnfmdn5q96bc; path=/; HttpOnly; SameSite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "sf_redirect=deleted; expires=Sun, 28-Mar-2021 10:00:13 GMT; Max-Age=0; path=/; httponly"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.configure]=4448c72c00d853284d9beff8.N_tQl_9mmSwI7Sut7MLW5zclfAPcrogQR4LLp7EmB7k.ZMkgwswA1ENmmhv1oLKcoEZpUWWKx_4lC-Sjn_xXd-hArjnYhQr8XWS5Yg; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.account.addressbook]=7d9c3b712fc12dfb003baf6f4.-D_AGO0RWiWAIsl4_o1qtD1R2g7VoxfNnM81BVQp3QI.mnWIKqomEHX1QIwKnNQL_E5niGiF1WKfxYl-UXlliVa2fZF93l8tc-R6nA; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.line-item.change-quantity]=d750593c8667d8dc5b93383.1myVXa_07DB4Y4mxFq72EGFBv__Vp0hOQCZeWetfcKU.pwvPCf23qQQ_AsjpQMmZQQ8Q3saC7TsMDmQvEo8zMojlA94Tl8WeeE0R0A; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.line-item.delete]=5ea1c68f30559255108f25959050a929._5Cmz0bvl4bnzKO7F3OzKDpZidHjlVaxD8mJja9snuc.i9SVlneL2_yJhe7ScDLaTXU905aPzxXwWpC8x-Y03deO3cmQA77Uq4-Z7g; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.finish.order]=965.YpHY3rFSoHnWYiHlt25UP_e-MkKxcTyePWxI-LC3Nfk.Mua9jsIx0DuOOn6J1RcfRbLpAXaEElrGECAPgtHQVsEE54nm4SjCTrhbEQ; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.store-api.proxy]=c.oMJ-AT2lk7aGbw-IzybVfR35lcoHnXUd3-XNeqVA4Fs.__UPQkrPp_XCCl7ggmeRF26mzJp1yztLu4KpDckQpTXIpDU3C87l_-8GZA; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache, private"
                    },
                    {
                      "key": "Access-Control-Allow-Origin",
                      "value": "*"
                    },
                    {
                      "key": "Access-Control-Allow-Methods",
                      "value": "GET,POST,PUT,PATCH,DELETE"
                    },
                    {
                      "key": "Access-Control-Allow-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "Access-Control-Expose-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "X-Frame-Options",
                      "value": "deny"
                    },
                    {
                      "key": "X-Content-Type-Options",
                      "value": "nosniff"
                    },
                    {
                      "key": "Referrer-Policy",
                      "value": "strict-origin-when-cross-origin"
                    },
                    {
                      "key": "X-Debug-Token",
                      "value": "f64d0a"
                    },
                    {
                      "key": "X-Debug-Token-Link",
                      "value": "http://localhost:7777/_profiler/f64d0a"
                    },
                    {
                      "key": "X-Robots-Tag",
                      "value": "noindex"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5, max=96"
                    },
                    {
                      "key": "Connection",
                      "value": "Keep-Alive"
                    },
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/html; charset=UTF-8"
                    }
                  ],
                  "cookie": [],
                  "body": "<!DOCTYPE html>\n<html lang=\"en-GB\"\n      itemscope=\"itemscope\"\n      itemtype=\"https://schema.org/WebPage\">\n    <head>\n    </head>\n    <body class=\"is-ctl-checkout is-act-confirmpage\">\n        <header class=\"header-minimal\">\n        </header>\n        <main class=\"content-main\">\n            <div class=\"container\">\n                <div class=\"container-main\">\n                    <div class=\"checkout\">\n                        <div class=\"checkout-container\">\n                            <div class=\"checkout-main\">\n                                 <h1 class=\"confirm-main-header\">Complete order </h1>\n                                <div class=\"d-none hidden-line-items-information\"\n         data-currency=\"EUR\"\n         data-shipping=\"5.5\"\n         data-value=\"1493.35\"\n         data-tax=\"238.44\"\n    >\n                                    <span class=\"hidden-line-item\"\n                      data-id=\"5c5ad48ee35a441d8057ae7433f840a2\"\n                      data-name=\"Main product\"\n                      data-quantity=\"3\"\n                      data-price=\"495.95\">\n                </span>\n                                </div>\n                            </div>\n                            <div class=\"checkout-aside \">\n                                <div class=\"checkout-aside-container\">\n                                    <div class=\"checkout-aside-summary\">\n                                        <h2 class=\"checkout-aside-summary-header\">\n                                                    Summary\n                                                </h2>\n                                        <div class=\"checkout-aside-summary-list-container\">\n                                            <div class=\"checkout-aside-summary-container\">\n                                                <dl class=\"row checkout-aside-summary-list no-gutters \">\n                                                    <dt class=\"col-7 checkout-aside-summary-label\">\n            Total\n        </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value\">\n            €1,487.85*\n        </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label\">\n                    Shipping costs\n                </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value\">\n                    €5.50*\n                </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label checkout-aside-summary-total\">\n            Grand total\n        </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value checkout-aside-summary-total\">\n            €1,493.35*        </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label summary-net\">\n            Net total\n        </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value summary-net\">\n            €1,254.91\n        </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label summary-tax\">\n                    plus 19% VAT\n                </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value summary-tax\">\n                    €238.44\n                </dd>\n                                                </dl>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"checkout-aside-action\">\n                                        <form id=\"confirmOrderForm\"\n              action=\"/checkout/order\"\n              data-form-csrf-handler=\"true\"\n              data-form-preserver=\"true\"\n              data-form-submit-loader=\"true\"\n              method=\"post\">\n                                            <input type=\"hidden\" name=\"_csrf_token\" value=\"965.YpHY3rFSoHnWYiHlt25UP_e-MkKxcTyePWxI-LC3Nfk.Mua9jsIx0DuOOn6J1RcfRbLpAXaEElrGECAPgtHQVsEE54nm4SjCTrhbEQ\">\n                                            <button id=\"confirmFormSubmit\"\n                        class=\"btn btn-primary btn-block btn-lg\"\n                        form=\"confirmOrderForm\"\n                                            type=\"submit\">\n                    Submit order\n                </button>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer class=\"footer-minimal\">\n        </footer>\n</body>\n</html>"
                }
              ]
            },
            {
              "name": "unset front session",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                      "const jar = pm.cookies.jar();\r",
                      "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                      "    if (error) {\r",
                      "        console.log(error.message)\r",
                      "    }\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "A test case checking merge when guest has 3 items, customer has no items in cart before merge"
        },
        {
          "name": "cust (3), guest (1), cust (4)",
          "item": [
            {
              "name": "Log out a customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    pm.response.to.have.header(\"Sw-Context-Token\");\r",
                      "    pm.environment.set(\"gen_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/account/logout",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "account",
                    "logout"
                  ]
                },
                "description": "Logs out a customer."
              },
              "response": []
            },
            {
              "name": "Add items to the cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"has 1 item\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.lineItems).to.be.lengthOf(1);",
                      "    pm.expect(jsonData.lineItems[0]).to.haveOwnProperty('quantity').to.eq(1);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n \"items\": [\n    {\n        \"id\": \"16d5986a83da4a92b6ec1f11a5a0874e\",\n        \"referencedId\": \"2a88d9b59d474c7e869d8071649be43c\",\n        \"quantity\": 1,\n        \"type\": \"product\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/checkout/cart/line-item",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "checkout",
                    "cart",
                    "line-item"
                  ]
                },
                "description": "This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.\n\nExample: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)"
              },
              "response": []
            },
            {
              "name": "Log in a customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    pm.response.to.have.header(\"Sw-Context-Token\");\r",
                      "    pm.environment.set(\"gen_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/account/login",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "account",
                    "login"
                  ]
                },
                "description": "Logs in customers given their credentials."
              },
              "response": []
            },
            {
              "name": "get sg login token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Has token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string')\r",
                      "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                      "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login",
                    "token"
                  ]
                },
                "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
              },
              "response": [
                {
                  "name": "Return a token",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "sw-access-key",
                        "value": "{{apiKey}}",
                        "description": "Added as a part of security scheme: apikey"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "description": "(Required) Content type of the request"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "description": "(Required) Accepted response content types"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/sitemap",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "sitemap"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiZTBiYzI5MGYzM2E3NGRmOWI5NDRmZjBiMjI5ZjAzMWIiLCJleHAiOjE2NDgyOTU3NzcsImlzcyI6ImxvY2FsaG9zdCIsImlhdCI6MTY0ODI5NTcxN30.5M6nuv-PCELqWdiS-VKcmllNPlVtR4qpn7_3jS4Gu_8\",\n    \"expiration\": 1648295777\n}\n"
                },
                {
                  "name": "bad secret error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "description": "(Required) Content type of the request"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "description": "(Required) Accepted response content types"
                      },
                      {
                        "key": "sw-context-token",
                        "value": "{{gen_contextToken}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                      "host": [
                        "{{sw_store_api}}"
                      ],
                      "path": [
                        "sgwebcheckout",
                        "login",
                        "token"
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Date",
                      "value": "Sat, 26 Mar 2022 11:53:37 GMT"
                    },
                    {
                      "key": "Server",
                      "value": "Apache/2.4.46 (Unix) OpenSSL/1.0.2u PHP/7.4.12 mod_wsgi/3.5 Python/2.7.13 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.11 Perl/v5.30.1"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "PHP/7.4.12"
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache, private"
                    },
                    {
                      "key": "Access-Control-Allow-Origin",
                      "value": "*"
                    },
                    {
                      "key": "Access-Control-Allow-Methods",
                      "value": "GET,POST,PUT,PATCH,DELETE"
                    },
                    {
                      "key": "Access-Control-Allow-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "Access-Control-Expose-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "sw-context-token",
                      "value": "0XC8rfRCsrjLNEpRrsaxoe28OvRLLNGd"
                    },
                    {
                      "key": "x-frame-options",
                      "value": "deny"
                    },
                    {
                      "key": "X-Debug-Token",
                      "value": "52f720"
                    },
                    {
                      "key": "X-Debug-Token-Link",
                      "value": "http://localhost:7777/_profiler/52f720"
                    },
                    {
                      "key": "X-Robots-Tag",
                      "value": "noindex"
                    },
                    {
                      "key": "Connection",
                      "value": "close"
                    },
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"errors\": [\n        {\n            \"code\": \"9\",\n            \"status\": \"500\",\n            \"title\": \"Internal Server Error\",\n            \"detail\": \"Invalid secret.\",\n            \"meta\": {\n                \"trace\": [],\n                \"file\": \"vendor/rbdwllr/reallysimplejwt/src/Build.php\",\n                \"line\": 121\n            }\n        }\n    ]\n}"
                }
              ]
            },
            {
              "name": "Frontend login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Load the HTML response to $\r",
                      "const pkg = require('cheerio')\r",
                      "const $ = pkg.load(pm.response.text());\r",
                      "\r",
                      "pm.test(\"Check cart page\", function () {\r",
                      "    const totals = $('.hidden-line-items-information')\r",
                      "    const lineItem = $('.hidden-line-item')\r",
                      "    pm.expect(totals).to.be.not.undefined;\r",
                      "    pm.expect(lineItem).to.be.not.undefined;\r",
                      "    pm.expect(lineItem.length).to.eq(2, 'Should have 1 qty main + 3 qty main product');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check we are in cart confirm page\", function () {\r",
                      "    const bodyClass = $('.is-ctl-checkout.is-act-confirmpage')\r",
                      "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{gen_login_token}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Frontend login",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}",
                      "host": [
                        "{{sw_endpoint_frontend}}"
                      ],
                      "path": [
                        "sgwebcheckout",
                        "login"
                      ],
                      "query": [
                        {
                          "key": "token",
                          "value": "{{gen_login_token}}"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "html",
                  "header": [
                    {
                      "key": "Date",
                      "value": "Mon, 28 Mar 2022 10:00:05 GMT"
                    },
                    {
                      "key": "Server",
                      "value": "Apache/2.4.46 (Unix) OpenSSL/1.0.2u PHP/7.4.12 mod_wsgi/3.5 Python/2.7.13 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.11 Perl/v5.30.1"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "PHP/7.4.12"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "session-=1cscrpqsidkphomnfmdn5q96bc; path=/; HttpOnly; SameSite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "sf_redirect=deleted; expires=Sun, 28-Mar-2021 10:00:13 GMT; Max-Age=0; path=/; httponly"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.configure]=4448c72c00d853284d9beff8.N_tQl_9mmSwI7Sut7MLW5zclfAPcrogQR4LLp7EmB7k.ZMkgwswA1ENmmhv1oLKcoEZpUWWKx_4lC-Sjn_xXd-hArjnYhQr8XWS5Yg; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.account.addressbook]=7d9c3b712fc12dfb003baf6f4.-D_AGO0RWiWAIsl4_o1qtD1R2g7VoxfNnM81BVQp3QI.mnWIKqomEHX1QIwKnNQL_E5niGiF1WKfxYl-UXlliVa2fZF93l8tc-R6nA; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.line-item.change-quantity]=d750593c8667d8dc5b93383.1myVXa_07DB4Y4mxFq72EGFBv__Vp0hOQCZeWetfcKU.pwvPCf23qQQ_AsjpQMmZQQ8Q3saC7TsMDmQvEo8zMojlA94Tl8WeeE0R0A; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.line-item.delete]=5ea1c68f30559255108f25959050a929._5Cmz0bvl4bnzKO7F3OzKDpZidHjlVaxD8mJja9snuc.i9SVlneL2_yJhe7ScDLaTXU905aPzxXwWpC8x-Y03deO3cmQA77Uq4-Z7g; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.finish.order]=965.YpHY3rFSoHnWYiHlt25UP_e-MkKxcTyePWxI-LC3Nfk.Mua9jsIx0DuOOn6J1RcfRbLpAXaEElrGECAPgtHQVsEE54nm4SjCTrhbEQ; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.store-api.proxy]=c.oMJ-AT2lk7aGbw-IzybVfR35lcoHnXUd3-XNeqVA4Fs.__UPQkrPp_XCCl7ggmeRF26mzJp1yztLu4KpDckQpTXIpDU3C87l_-8GZA; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache, private"
                    },
                    {
                      "key": "Access-Control-Allow-Origin",
                      "value": "*"
                    },
                    {
                      "key": "Access-Control-Allow-Methods",
                      "value": "GET,POST,PUT,PATCH,DELETE"
                    },
                    {
                      "key": "Access-Control-Allow-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "Access-Control-Expose-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "X-Frame-Options",
                      "value": "deny"
                    },
                    {
                      "key": "X-Content-Type-Options",
                      "value": "nosniff"
                    },
                    {
                      "key": "Referrer-Policy",
                      "value": "strict-origin-when-cross-origin"
                    },
                    {
                      "key": "X-Debug-Token",
                      "value": "f64d0a"
                    },
                    {
                      "key": "X-Debug-Token-Link",
                      "value": "http://localhost:7777/_profiler/f64d0a"
                    },
                    {
                      "key": "X-Robots-Tag",
                      "value": "noindex"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5, max=96"
                    },
                    {
                      "key": "Connection",
                      "value": "Keep-Alive"
                    },
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/html; charset=UTF-8"
                    }
                  ],
                  "cookie": [],
                  "body": "<!DOCTYPE html>\n<html lang=\"en-GB\"\n      itemscope=\"itemscope\"\n      itemtype=\"https://schema.org/WebPage\">\n    <head>\n    </head>\n    <body class=\"is-ctl-checkout is-act-confirmpage\">\n        <header class=\"header-minimal\">\n        </header>\n        <main class=\"content-main\">\n            <div class=\"container\">\n                <div class=\"container-main\">\n                    <div class=\"checkout\">\n                        <div class=\"checkout-container\">\n                            <div class=\"checkout-main\">\n                                 <h1 class=\"confirm-main-header\">Complete order </h1>\n                                <div class=\"d-none hidden-line-items-information\"\n         data-currency=\"EUR\"\n         data-shipping=\"5.5\"\n         data-value=\"1493.35\"\n         data-tax=\"238.44\"\n    >\n                                    <span class=\"hidden-line-item\"\n                      data-id=\"5c5ad48ee35a441d8057ae7433f840a2\"\n                      data-name=\"Main product\"\n                      data-quantity=\"3\"\n                      data-price=\"495.95\">\n                </span>\n                                </div>\n                            </div>\n                            <div class=\"checkout-aside \">\n                                <div class=\"checkout-aside-container\">\n                                    <div class=\"checkout-aside-summary\">\n                                        <h2 class=\"checkout-aside-summary-header\">\n                                                    Summary\n                                                </h2>\n                                        <div class=\"checkout-aside-summary-list-container\">\n                                            <div class=\"checkout-aside-summary-container\">\n                                                <dl class=\"row checkout-aside-summary-list no-gutters \">\n                                                    <dt class=\"col-7 checkout-aside-summary-label\">\n            Total\n        </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value\">\n            €1,487.85*\n        </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label\">\n                    Shipping costs\n                </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value\">\n                    €5.50*\n                </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label checkout-aside-summary-total\">\n            Grand total\n        </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value checkout-aside-summary-total\">\n            €1,493.35*        </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label summary-net\">\n            Net total\n        </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value summary-net\">\n            €1,254.91\n        </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label summary-tax\">\n                    plus 19% VAT\n                </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value summary-tax\">\n                    €238.44\n                </dd>\n                                                </dl>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"checkout-aside-action\">\n                                        <form id=\"confirmOrderForm\"\n              action=\"/checkout/order\"\n              data-form-csrf-handler=\"true\"\n              data-form-preserver=\"true\"\n              data-form-submit-loader=\"true\"\n              method=\"post\">\n                                            <input type=\"hidden\" name=\"_csrf_token\" value=\"965.YpHY3rFSoHnWYiHlt25UP_e-MkKxcTyePWxI-LC3Nfk.Mua9jsIx0DuOOn6J1RcfRbLpAXaEElrGECAPgtHQVsEE54nm4SjCTrhbEQ\">\n                                            <button id=\"confirmFormSubmit\"\n                        class=\"btn btn-primary btn-block btn-lg\"\n                        form=\"confirmOrderForm\"\n                                            type=\"submit\">\n                    Submit order\n                </button>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer class=\"footer-minimal\">\n        </footer>\n</body>\n</html>"
                }
              ]
            },
            {
              "name": "Delete a cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/checkout/cart",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "checkout",
                    "cart"
                  ]
                },
                "description": "This route deletes the cart of the customer."
              },
              "response": []
            },
            {
              "name": "unset front session",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                      "const jar = pm.cookies.jar();\r",
                      "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                      "    if (error) {\r",
                      "        console.log(error.message)\r",
                      "    }\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "description": "Test merge scenario:\n\n*   customer 3 items\n*   logout\n*   guest 1 item\n*   login\n*   customer 3 items + 1 item"
        },
        {
          "name": "Customer token (no change)",
          "item": [
            {
              "name": "Log in a customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    pm.response.to.have.header(\"Sw-Context-Token\");\r",
                      "    pm.environment.set(\"gen_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/account/login",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "account",
                    "login"
                  ]
                },
                "description": "Logs in customers given their credentials."
              },
              "response": []
            },
            {
              "name": "get sg login token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Has token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string')\r",
                      "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                      "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login",
                    "token"
                  ]
                },
                "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
              },
              "response": []
            },
            {
              "name": "Frontend login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const pkg = require('cheerio')\r",
                      "const $ = pkg.load(pm.response.text());\r",
                      "pm.test(\"Check we are in cart confirm page\", function () {\r",
                      "    const bodyClass = $('.is-ctl-checkout.is-act-cartpage')\r",
                      "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                      "});\r",
                      "\r",
                      "// token sync calls the pipeline that saves the new context token to App storage\r",
                      "pm.test(\"Check that we got a token sync payload\", function () {\r",
                      "    const sgTemplate = $('template[data-sg-webcheckout-app-plugin=]');\r",
                      "    pm.expect(sgTemplate).to.be.lengthOf(1);\r",
                      "    const attribs = JSON.parse(sgTemplate[0].attribs['data-sg-webcheckout-app-plugin-options']);\r",
                      "   \r",
                      "    pm.expect(attribs).to.not.be.undefined;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Allow cookie deletion by going to cookies -> Domain Allowlist",
                      "const jar = pm.cookies.jar();",
                      "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {",
                      "    if (error) {",
                      "        console.log(error.message)",
                      "    }",
                      "});",
                      "jar.set(pm.environment.get('host'), 'sgWebView', '0', function (error) {",
                      "    if (error) {",
                      "        console.log(error.message)",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
                    "type": "text"
                  },
                  {
                    "key": "Cookie",
                    "value": "sgWebView=1",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}&redirectTo=frontend.checkout.cart.page",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{gen_login_token}}"
                    },
                    {
                      "key": "redirectTo",
                      "value": "frontend.checkout.cart.page"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Fetch the current context",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Customer token did not change\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.customer).to.be.not.null;\r",
                      "    const oldToken = pm.environment.get('gen_contextToken');\r",
                      "    pm.expect(jsonData.token).to.eq(oldToken);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "packages": {},
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/context",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "context"
                  ]
                },
                "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
              },
              "response": []
            },
            {
              "name": "get sg login token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Has token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string')\r",
                      "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                      "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login",
                    "token"
                  ]
                },
                "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
              },
              "response": []
            },
            {
              "name": "Frontend login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const pkg = require('cheerio')\r",
                      "const $ = pkg.load(pm.response.text());\r",
                      "pm.test(\"Check we are in cart confirm page\", function () {\r",
                      "    const bodyClass = $('.is-ctl-accountprofile.is-act-index')\r",
                      "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                      "});\r",
                      "\r",
                      "// token sync calls the pipeline that saves the new context token to App storage\r",
                      "pm.test(\"Check that we got a token sync payload\", function () {\r",
                      "    const sgTemplate = $('template[data-sg-webcheckout-app-plugin=]');\r",
                      "    pm.expect(sgTemplate).to.be.lengthOf(1);\r",
                      "    const attribs = JSON.parse(sgTemplate[0].attribs['data-sg-webcheckout-app-plugin-options']);\r",
                      "   \r",
                      "    pm.expect(attribs).to.not.be.undefined;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// we do not erase cookies as we want to logout (receive new token)"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
                    "type": "text"
                  },
                  {
                    "key": "Cookie",
                    "value": "sgWebView=1",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}&redirectTo=frontend.account.home.page",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{gen_login_token}}"
                    },
                    {
                      "key": "redirectTo",
                      "value": "frontend.account.home.page"
                    }
                  ]
                },
                "description": "The customer is logged out here from the saved session & thus gets a new context token"
              },
              "response": []
            },
            {
              "name": "Fetch the current context",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Customer token did not change\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.customer).to.be.not.null;\r",
                      "    const oldToken = pm.environment.get('gen_contextToken');\r",
                      "    pm.expect(jsonData.token).to.eq(oldToken);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "packages": {},
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/context",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "context"
                  ]
                },
                "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
              },
              "response": []
            },
            {
              "name": "get sg login token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Has token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string')\r",
                      "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                      "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login",
                    "token"
                  ]
                },
                "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
              },
              "response": []
            },
            {
              "name": "FE address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const pkg = require('cheerio')\r",
                      "const $ = pkg.load(pm.response.text());\r",
                      "pm.test(\"Check we are on the right page\", function () {\r",
                      "    const bodyClass = $('.is-ctl-address.is-act-accountaddressoverview')\r",
                      "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                      "});\r",
                      "\r",
                      "// token sync calls the pipeline that saves the new context token to App storage\r",
                      "pm.test(\"Check that we got a token sync payload\", function () {\r",
                      "    const sgTemplate = $('template[data-sg-webcheckout-app-plugin=]');\r",
                      "    pm.expect(sgTemplate).to.be.lengthOf(1);\r",
                      "    const attribs = JSON.parse(sgTemplate[0].attribs['data-sg-webcheckout-app-plugin-options']);\r",
                      "   \r",
                      "    pm.expect(attribs).to.not.be.undefined;\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// we do not erase cookies as we want to logout (receive new token)"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Cookie",
                    "value": "sgWebView=1;",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}&redirectTo={{sw_endpoint_frontend}}/account/address",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{gen_login_token}}"
                    },
                    {
                      "key": "redirectTo",
                      "value": "frontend.account.address.page",
                      "disabled": true
                    },
                    {
                      "key": "redirectTo",
                      "value": "{{sw_endpoint_frontend}}/account/address"
                    }
                  ]
                },
                "description": "The customer is logged out here from the saved session & thus gets a new context token"
              },
              "response": []
            },
            {
              "name": "Fetch the current context",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Customer token did not change\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.customer).to.be.not.null;\r",
                      "    const oldToken = pm.environment.get('gen_contextToken');\r",
                      "    pm.expect(jsonData.token).to.eq(oldToken);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/context",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "context"
                  ]
                },
                "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
              },
              "response": []
            },
            {
              "name": "Log in a customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    pm.response.to.have.header(\"Sw-Context-Token\");\r",
                      "    const oldToken = pm.environment.get('gen_contextToken');\r",
                      "    const newToken = pm.response.headers.get('Sw-Context-Token');\r",
                      "    pm.expect(newToken, 'epxecting tokens not to change on API login').to.eq(oldToken);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Allow cookie deletion by going to cookies -> Domain Allowlist",
                      "const jar = pm.cookies.jar();",
                      "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {",
                      "    if (error) {",
                      "        console.log(error.message)",
                      "    }",
                      "});",
                      "jar.set(pm.environment.get('host'), 'sgWebView', '0', function (error) {",
                      "    if (error) {",
                      "        console.log(error.message)",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "description": "if it is set, it will force to regenerate the token!!!",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/account/login",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "account",
                    "login"
                  ]
                },
                "description": "Logs in customers given their credentials."
              },
              "response": []
            },
            {
              "name": "Fetch the current context",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Customer token did not change\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.customer).to.be.not.null;\r",
                      "    const oldToken = pm.environment.get('gen_contextToken');\r",
                      "    pm.expect(jsonData.token).to.eq(oldToken);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/context",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "context"
                  ]
                },
                "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
              },
              "response": []
            }
          ],
          "description": "Checks that the customer token gets retained when trying to log them in. This is the case when they are already logged into the session. Attempting to log them back in would result in the context token being changed. Which creates a contextToken de-sync with the App.\n\nAs of 6.5.8.9 & 6.6.1.1 the customer token changes in logout & log-in events. So now we are attempting to call the pipeline to sync the token with the app when context-token changes."
        },
        {
          "name": "Double login",
          "item": [
            {
              "name": "Log out a customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/account/logout",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "account",
                    "logout"
                  ]
                },
                "description": "Logs out a customer."
              },
              "response": []
            },
            {
              "name": "Fetch the current context",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string');\r",
                      "    pm.environment.set(\"gen_contextToken\", jsonData.token);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/context",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "context"
                  ]
                },
                "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
              },
              "response": []
            },
            {
              "name": "Log in a customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    pm.response.to.have.header(\"Sw-Context-Token\");\r",
                      "    pm.environment.set(\"gen_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/account/login",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "account",
                    "login"
                  ]
                },
                "description": "Logs in customers given their credentials."
              },
              "response": []
            },
            {
              "name": "SW: customer info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/account/customer",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "account",
                    "customer"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete a cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/checkout/cart",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "checkout",
                    "cart"
                  ]
                },
                "description": "This route deletes the cart of the customer."
              },
              "response": []
            },
            {
              "name": "Add items to the cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Check line items\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.lineItems).to.be.a('array').lengthOf(1)",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n \"items\": [\n    {\n      \"referencedId\": \"2a88d9b59d474c7e869d8071649be43c\",\n      \"quantity\": 3,\n      \"type\": \"product\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/checkout/cart/line-item",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "checkout",
                    "cart",
                    "line-item"
                  ]
                },
                "description": "This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.\n\nExample: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)"
              },
              "response": []
            },
            {
              "name": "get sg login token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Has token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string')\r",
                      "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                      "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login",
                    "token"
                  ]
                },
                "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
              },
              "response": []
            },
            {
              "name": "Frontend login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const pkg = require('cheerio')\r",
                      "const $ = pkg.load(pm.response.text());\r",
                      "\r",
                      "pm.test(\"Check cart page\", function () {\r",
                      "    const totals = $('.hidden-line-items-information')\r",
                      "    const lineItem = $('.hidden-line-item')\r",
                      "    pm.expect(totals).to.be.not.undefined;\r",
                      "    pm.expect(lineItem).to.be.not.undefined;\r",
                      "    pm.expect(lineItem.attr('data-quantity')).to.eq('3')\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check we are in cart confirm page\", function () {\r",
                      "    const bodyClass = $('.is-ctl-checkout.is-act-confirmpage')\r",
                      "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Allow cookie deletion by going to cookies -> Domain Allowlist",
                      "const jar = pm.cookies.jar();",
                      "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {",
                      "    if (error) {",
                      "        console.log(error.message)",
                      "    }",
                      "});",
                      "jar.set(pm.environment.get('host'), 'sgWebView', '0', function (error) {",
                      "    if (error) {",
                      "        console.log(error.message)",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{gen_login_token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "unset front session",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                      "const jar = pm.cookies.jar();\r",
                      "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                      "    if (error) {\r",
                      "        console.log(error.message)\r",
                      "    }\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get sg login token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Has token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string')\r",
                      "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                      "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login",
                    "token"
                  ]
                },
                "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
              },
              "response": []
            },
            {
              "name": "Frontend login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Load the HTML response to $\r",
                      "const pkg = require('cheerio')\r",
                      "const $ = pkg.load(pm.response.text());\r",
                      "\r",
                      "pm.test(\"Check cart page\", function () {\r",
                      "    const totals = $('.hidden-line-items-information')\r",
                      "    const lineItem = $('.hidden-line-item')\r",
                      "    pm.expect(totals).to.be.not.undefined;\r",
                      "    pm.expect(lineItem).to.be.not.undefined;\r",
                      "    pm.expect(lineItem.attr('data-quantity')).to.eq('3')\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check we are in cart confirm page\", function () {\r",
                      "    const bodyClass = $('.is-ctl-checkout.is-act-confirmpage')\r",
                      "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{gen_login_token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete a cart",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{gen_accessKey}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "sw-access-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/checkout/cart",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "checkout",
                    "cart"
                  ]
                },
                "description": "This route deletes the cart of the customer."
              },
              "response": []
            }
          ],
          "description": "Tries logging in the twice in a row. We had issues with a setting in SW6 for SW6M-61 ticket. This checks the setting."
        }
      ]
    },
    {
      "name": "logged out",
      "item": [
        {
          "name": "Log out a customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{gen_accessKey}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "sw-access-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "(Required) Content type of the request"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "(Required) Accepted response content types"
              },
              {
                "key": "sw-context-token",
                "value": "{{gen_contextToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_store_api}}/account/logout",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "account",
                "logout"
              ]
            },
            "description": "Logs out a customer."
          },
          "response": []
        },
        {
          "name": "Fetch the current context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Save context token\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.token).to.be.a('string');\r",
                  "    pm.environment.set(\"gen_contextToken\", jsonData.token);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{gen_accessKey}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "sw-access-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "(Required) Content type of the request"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "(Required) Accepted response content types"
              }
            ],
            "url": {
              "raw": "{{sw_store_api}}/context",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "context"
              ]
            },
            "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
          },
          "response": []
        },
        {
          "name": "Add items to the cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"has 1 item\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.lineItems).to.be.lengthOf(1);",
                  "    pm.expect(jsonData.lineItems[0]).to.haveOwnProperty('quantity').to.eq(2);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{gen_accessKey}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "sw-access-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "(Required) Content type of the request"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "(Required) Accepted response content types"
              },
              {
                "key": "sw-context-token",
                "value": "{{gen_contextToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"items\": [\n    {\n        \"id\": \"16d5986a83da4a92b6ec1f11a5a0874e\",\n        \"referencedId\": \"2a88d9b59d474c7e869d8071649be43c\",\n        \"quantity\": 2,\n        \"type\": \"product\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{sw_store_api}}/checkout/cart/line-item",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "checkout",
                "cart",
                "line-item"
              ]
            },
            "description": "This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.\n\nExample: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)"
          },
          "response": []
        },
        {
          "name": "get sg login token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Has token\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.token).to.be.a('string')\r",
                  "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                  "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{gen_accessKey}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "sw-access-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "(Required) Content type of the request"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "(Required) Accepted response content types"
              },
              {
                "key": "sw-context-token",
                "value": "{{gen_contextToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "sgwebcheckout",
                "login",
                "token"
              ]
            },
            "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
          },
          "response": []
        },
        {
          "name": "Frontend login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Load the HTML response to $\r",
                  "const pkg = require('cheerio')\r",
                  "const $ = pkg.load(pm.response.text());\r",
                  "\r",
                  "pm.test(\"Check cart page\", function () {\r",
                  "    const totals = $('.hidden-line-items-information')\r",
                  "    const lineItem = $('.hidden-line-item')\r",
                  "    pm.expect(totals).to.be.not.undefined;\r",
                  "    pm.expect(lineItem).to.be.not.undefined;\r",
                  "    pm.expect(lineItem.attr('data-quantity')).to.eq('2')\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check we redirected to logged out cart page\", function () {\r",
                  "    const bodyClass = $('.is-ctl-checkout.is-act-cartpage')\r",
                  "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                  "const jar = pm.cookies.jar();\r",
                  "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                  "    if (error) {\r",
                  "        console.log(error.message)\r",
                  "    }\r",
                  "});\r",
                  "jar.set(pm.environment.get('host'), 'sgWebView', '0', function (error) {\r",
                  "    if (error) {\r",
                  "        console.log(error.message)\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}&redirectTo=frontend.checkout.cart.page",
              "host": [
                "{{sw_endpoint_frontend}}"
              ],
              "path": [
                "sgwebcheckout",
                "login"
              ],
              "query": [
                {
                  "key": "token",
                  "value": "{{gen_login_token}}"
                },
                {
                  "key": "redirectTo",
                  "value": "frontend.checkout.cart.page"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Registration",
      "item": [
        {
          "name": "Checkout",
          "item": [
            {
              "name": "Guest",
              "item": [
                {
                  "name": "Log out a customer",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{gen_accessKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "sw-access-key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "description": "(Required) Content type of the request"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "description": "(Required) Accepted response content types"
                      },
                      {
                        "key": "sw-context-token",
                        "value": "{{gen_contextToken}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{sw_store_api}}/account/logout",
                      "host": [
                        "{{sw_store_api}}"
                      ],
                      "path": [
                        "account",
                        "logout"
                      ]
                    },
                    "description": "Logs out a customer."
                  },
                  "response": []
                },
                {
                  "name": "Fetch the current context",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Save context token\", function () {\r",
                          "    var jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData.token).to.be.a('string');\r",
                          "    pm.environment.set(\"gen_contextToken\", jsonData.token);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{gen_accessKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "sw-access-key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "description": "(Required) Content type of the request"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "description": "(Required) Accepted response content types"
                      }
                    ],
                    "url": {
                      "raw": "{{sw_store_api}}/context",
                      "host": [
                        "{{sw_store_api}}"
                      ],
                      "path": [
                        "context"
                      ]
                    },
                    "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
                  },
                  "response": []
                },
                {
                  "name": "Add items to the cart",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"has 1 item\", function () {",
                          "    var jsonData = pm.response.json();",
                          "    pm.expect(jsonData.lineItems).to.be.lengthOf(1);",
                          "    pm.expect(jsonData.lineItems[0]).to.haveOwnProperty('quantity').to.eq(2);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{gen_accessKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "sw-access-key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "description": "(Required) Content type of the request"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "description": "(Required) Accepted response content types"
                      },
                      {
                        "key": "sw-context-token",
                        "value": "{{gen_contextToken}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"items\": [\n    {\n        \"id\": \"16d5986a83da4a92b6ec1f11a5a0874e\",\n        \"referencedId\": \"2a88d9b59d474c7e869d8071649be43c\",\n        \"quantity\": 2,\n        \"type\": \"product\"\n    }\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_store_api}}/checkout/cart/line-item",
                      "host": [
                        "{{sw_store_api}}"
                      ],
                      "path": [
                        "checkout",
                        "cart",
                        "line-item"
                      ]
                    },
                    "description": "This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.\n\nExample: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)"
                  },
                  "response": []
                },
                {
                  "name": "get sg login token",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Has token\", function () {\r",
                          "    var jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData.token).to.be.a('string')\r",
                          "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                          "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{gen_accessKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "sw-access-key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "description": "(Required) Content type of the request"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "description": "(Required) Accepted response content types"
                      },
                      {
                        "key": "sw-context-token",
                        "value": "{{gen_contextToken}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                      "host": [
                        "{{sw_store_api}}"
                      ],
                      "path": [
                        "sgwebcheckout",
                        "login",
                        "token"
                      ]
                    },
                    "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
                  },
                  "response": []
                },
                {
                  "name": "Frontend login",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// Load the HTML response to $\r",
                          "const pkg = require('cheerio')\r",
                          "const $ = pkg.load(pm.response.text());\r",
                          "\r",
                          "pm.test(\"Check we redirected to register cart page\", function () {\r",
                          "    const bodyClass = $('.is-ctl-register.is-act-checkoutregisterpage')\r",
                          "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const endpoint = pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_frontend\")));\r",
                          "const encodedUrl = encodeURIComponent(endpoint + '/sgwebcheckout/register');\r",
                          "console.log(encodedUrl)\r",
                          "pm.variables.set('redirect', encodedUrl);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "User-Agent",
                        "value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?redirectTo={{redirect}}&sgcloud_checkout=1&token={{gen_login_token}}",
                      "host": [
                        "{{sw_endpoint_frontend}}"
                      ],
                      "path": [
                        "sgwebcheckout",
                        "login"
                      ],
                      "query": [
                        {
                          "key": "redirectTo",
                          "value": "{{redirect}}"
                        },
                        {
                          "key": "sgcloud_checkout",
                          "value": "1"
                        },
                        {
                          "key": "token",
                          "value": "{{gen_login_token}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "unset front session",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                          "const jar = pm.cookies.jar();\r",
                          "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                          "    if (error) {\r",
                          "        console.log(error.message)\r",
                          "    }\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{sw_endpoint_frontend}}",
                      "host": [
                        "{{sw_endpoint_frontend}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Customer",
              "item": [
                {
                  "name": "Log in a customer",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Save context token\", function () {\r",
                          "    pm.response.to.have.header(\"Sw-Context-Token\");\r",
                          "    pm.environment.set(\"gen_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{gen_accessKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "sw-access-key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "description": "(Required) Content type of the request"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "description": "(Required) Accepted response content types"
                      },
                      {
                        "key": "sw-context-token",
                        "value": "{{gen_contextToken}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{sw_store_api}}/account/login",
                      "host": [
                        "{{sw_store_api}}"
                      ],
                      "path": [
                        "account",
                        "login"
                      ]
                    },
                    "description": "Logs in customers given their credentials."
                  },
                  "response": []
                },
                {
                  "name": "get sg login token",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Has token\", function () {\r",
                          "    var jsonData = pm.response.json();\r",
                          "    pm.expect(jsonData.token).to.be.a('string')\r",
                          "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                          "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{gen_accessKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "sw-access-key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "description": "(Required) Content type of the request"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "description": "(Required) Accepted response content types"
                      },
                      {
                        "key": "sw-context-token",
                        "value": "{{gen_contextToken}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                      "host": [
                        "{{sw_store_api}}"
                      ],
                      "path": [
                        "sgwebcheckout",
                        "login",
                        "token"
                      ]
                    },
                    "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
                  },
                  "response": []
                },
                {
                  "name": "Frontend login",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// Load the HTML response to $\r",
                          "const pkg = require('cheerio')\r",
                          "const $ = pkg.load(pm.response.text());\r",
                          "\r",
                          "pm.test(\"Check we redirected to regular registration page as we are logged out\", function () {\r",
                          "    const bodyClass = $('.is-ctl-auth.is-act-loginpage');\r",
                          "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const endpoint = pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_frontend\")));\r",
                          "const encodedUrl = encodeURIComponent(endpoint + '/sgwebcheckout/register');\r",
                          "pm.variables.set('redirect', encodedUrl);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?redirectTo={{redirect}}&sgcloud_checkout=1&token={{gen_login_token}}",
                      "host": [
                        "{{sw_endpoint_frontend}}"
                      ],
                      "path": [
                        "sgwebcheckout",
                        "login"
                      ],
                      "query": [
                        {
                          "key": "redirectTo",
                          "value": "{{redirect}}"
                        },
                        {
                          "key": "sgcloud_checkout",
                          "value": "1"
                        },
                        {
                          "key": "token",
                          "value": "{{gen_login_token}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "unset front session",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                          "const jar = pm.cookies.jar();\r",
                          "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                          "    if (error) {\r",
                          "        console.log(error.message)\r",
                          "    }\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{sw_endpoint_frontend}}",
                      "host": [
                        "{{sw_endpoint_frontend}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ],
          "description": "Checks if the user is redirected to the proper registration page (see [SG-170](https://apite.atlassian.net/browse/SG-170))"
        }
      ]
    },
    {
      "name": "Invalid token",
      "item": [
        {
          "name": "Log out a customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{gen_accessKey}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "sw-access-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "(Required) Content type of the request"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "(Required) Accepted response content types"
              },
              {
                "key": "sw-context-token",
                "value": "{{gen_contextToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_store_api}}/account/logout",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "account",
                "logout"
              ]
            },
            "description": "Logs out a customer."
          },
          "response": []
        },
        {
          "name": "Fetch the current context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Save context token\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.token).to.be.a('string');\r",
                  "    pm.environment.set(\"gen_contextToken\", jsonData.token);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{gen_accessKey}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "sw-access-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "(Required) Content type of the request"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "(Required) Accepted response content types"
              }
            ],
            "url": {
              "raw": "{{sw_store_api}}/context",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "context"
              ]
            },
            "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
          },
          "response": []
        },
        {
          "name": "Frontend login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Load the HTML response to $\r",
                  "const pkg = require('cheerio')\r",
                  "const $ = pkg.load(pm.response.text());\r",
                  "\r",
                  "pm.test(\"Check we are on spinner page when token is bad\", function () {\r",
                  "    const bodyClass = $('.is-ctl-sgwebcheckout.is-act-login');\r",
                  "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                  "    const spinner = $('.sg-spinner');\r",
                  "    pm.expect(spinner).to.be.lengthOf(1);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                  "const jar = pm.cookies.jar();\r",
                  "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                  "    if (error) {\r",
                  "        console.log(error.message)\r",
                  "    }\r",
                  "});\r",
                  "jar.set(pm.environment.get('host'), 'sgWebView', '0', function (error) {\r",
                  "    if (error) {\r",
                  "        console.log(error.message)\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token=111",
              "host": [
                "{{sw_endpoint_frontend}}"
              ],
              "path": [
                "sgwebcheckout",
                "login"
              ],
              "query": [
                {
                  "key": "token",
                  "value": "111"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "unset front session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                  "const jar = pm.cookies.jar();\r",
                  "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                  "    if (error) {\r",
                  "        console.log(error.message)\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{sw_endpoint_frontend}}",
              "host": [
                "{{sw_endpoint_frontend}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Order -> Agent",
      "item": [
        {
          "name": "SWS: login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"get customer context token\", function () {\r",
                  "    pm.response.to.have.header(\"Sw-Context-Token\");\r",
                  "    pm.environment.set(\"gen_customer_t2_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "sw-context-token",
                "value": "test-context",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{sw_store_api}}/account/login",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "account",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SWS: Add items to the cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "{{gen_accessKey}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "sw-access-key",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "(Required) Content type of the request"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "description": "(Required) Accepted response content types"
              },
              {
                "key": "sw-context-token",
                "value": "{{gen_customer_t2_contextToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"items\": [\n    {\n      \"referencedId\": \"2a88d9b59d474c7e869d8071649be43c\",\n      \"quantity\": 1,\n      \"type\": \"product\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{sw_store_api}}/checkout/cart/line-item",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "checkout",
                "cart",
                "line-item"
              ]
            },
            "description": "This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.\n\nExample: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)"
          },
          "response": []
        },
        {
          "name": "SWS: order from a cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check & save order ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('string');",
                  "    pm.environment.set(\"gen_order1_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "accept": true,
              "user-agent": true
            }
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime libshopgate",
                "type": "text"
              },
              {
                "key": "sw-context-token",
                "value": "{{gen_customer_t2_contextToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerComment\": \"customer comment\",\n  \"affiliateCode\": \"SGConnect_App\",\n  \"campaignCode\": \"\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{sw_store_api}}/checkout/order",
              "host": [
                "{{sw_store_api}}"
              ],
              "path": [
                "checkout",
                "order"
              ]
            },
            "description": "Creates a new order from the current cart and deletes the cart."
          },
          "response": []
        },
        {
          "name": "SWA: get order with WebC",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check WebCheckout order extension\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.included).to.be.a('array');\r",
                  "    const webc = jsonData.included.find(item => item.type === 'shopgate_webc_order');\r",
                  "    pm.expect(webc).to.not.be.undefined;\r",
                  "    pm.expect(webc.attributes.userAgent).to.be.a('string').to.contain('libshopgate');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filter\": [\n        {\n            \"type\": \"equals\",\n            \"field\": \"id\",\n            \"value\": \"{{gen_order1_id}}\"\n        }\n    ],\n    \"associations\": {\n        \"shopgateWebcOrder\":{}\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{sw_endpoint_api}}/search/order",
              "host": [
                "{{sw_endpoint_api}}"
              ],
              "path": [
                "search",
                "order"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SWA: get SG webc order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check WebCheckout order extension\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data).to.be.a('array');\r",
                  "    const webc = jsonData.data.find(item => item.type === 'shopgate_webc_order');\r",
                  "    pm.expect(webc).to.not.be.undefined;\r",
                  "    pm.expect(webc.attributes.userAgent).to.be.a('string').to.contain('libshopgate');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{gen_access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filter\": [\n        {\n            \"type\": \"equals\",\n            \"field\": \"shopwareOrderId\",\n            \"value\": \"{{gen_order1_id}}\"\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{sw_endpoint_api}}/search/shopgate-webc-order",
              "host": [
                "{{sw_endpoint_api}}"
              ],
              "path": [
                "search",
                "shopgate-webc-order"
              ]
            }
          },
          "response": []
        }
      ],
      "description": "SG-163 requires userAgent to be saved with the order & be retrieved via API",
      "auth": {
        "type": "apikey",
        "apikey": [
          {
            "key": "value",
            "value": "{{gen_accessKey}}",
            "type": "string"
          },
          {
            "key": "key",
            "value": "sw-access-key",
            "type": "string"
          }
        ]
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Cart",
      "item": [
        {
          "name": "Is Shopgate rule",
          "item": [
            {
              "name": "SWS: Fetch the current context",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string');\r",
                      "    pm.environment.set(\"gen_contextToken\", jsonData.token);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/context",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "context"
                  ]
                },
                "description": "Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more."
              },
              "response": []
            },
            {
              "name": "SWS: add coupon (check failure)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Test cart coupon cannot be applied\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.errors).to.haveOwnProperty('promotion-not-eligible');",
                      "    pm.expect(jsonData.errors['promotion-not-eligible']).to.haveOwnProperty('name').to.eq('API: isShopgateWebC code promo');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"items\": [\n        {\n            \"referencedId\": \"2a88d9b59d474c7e869d8071649be43c\",\n            \"quantity\": 1,\n            \"type\": \"product\"\n        },\n        {\n            \"referencedId\": \"{{created_isSg_code_promo_code}}\",\n            \"type\": \"promotion\"\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/checkout/cart/line-item",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "checkout",
                    "cart",
                    "line-item"
                  ]
                },
                "description": "This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.\n\nExample: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)"
              },
              "response": []
            },
            {
              "name": "SWS: add coupon (check success)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Test cart coupon is applied\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.errors).to.not.haveOwnProperty('promotion-not-eligible');",
                      "    const promo = jsonData.lineItems.find(item => item.type === 'promotion');",
                      "    pm.expect(promo).not.be.undefined;",
                      "    pm.expect(promo).to.haveOwnProperty('referencedId').to.eq(pm.environment.get('created_isSg_code_promo_code'))",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "notifies that this is SG call",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"items\": [\n        {\n            \"referencedId\": \"{{created_isSg_code_promo_code}}\",\n            \"type\": \"promotion\"\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/checkout/cart/line-item",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "checkout",
                    "cart",
                    "line-item"
                  ]
                },
                "description": "This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.\n\nExample: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)"
              },
              "response": []
            },
            {
              "name": "SWS: Log in a customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Save context token\", function () {\r",
                      "    pm.response.to.have.header(\"Sw-Context-Token\");\r",
                      "    pm.environment.set(\"gen_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{sw_store_api}}/account/login",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "account",
                    "login"
                  ]
                },
                "description": "Logs in customers given their credentials."
              },
              "response": []
            },
            {
              "name": "SWS: get sg login token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Has token\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.token).to.be.a('string')\r",
                      "    pm.environment.set(\"gen_login_token\", jsonData.token);\r",
                      "    pm.expect(jsonData.expiration).to.be.a('number');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "(Required) Content type of the request"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "description": "(Required) Accepted response content types"
                  },
                  {
                    "key": "sw-context-token",
                    "value": "{{gen_contextToken}}",
                    "type": "text"
                  },
                  {
                    "key": "shopgate-check",
                    "value": "1",
                    "description": "required to extend expired sessions",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_store_api}}/sgwebcheckout/login/token",
                  "host": [
                    "{{sw_store_api}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login",
                    "token"
                  ]
                },
                "description": "Fetches a list of compressed sitemap files, which are often used by search engines."
              },
              "response": []
            },
            {
              "name": "Frontend login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Load the HTML response to $\r",
                      "const pkg = require('cheerio')\r",
                      "const $ = pkg.load(pm.response.text());\r",
                      "\r",
                      "pm.test(\"Check we are in cart confirm page\", function () {\r",
                      "    const bodyClass = $('.is-ctl-checkout.is-act-confirmpage');\r",
                      "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check cart page contents\", function () {\r",
                      "    const totals = $('.hidden-line-items-information');\r",
                      "    const promoItem = $('[data-name=\"API: isShopgateWebC code promo\"]');\r",
                      "    pm.expect(totals).to.be.not.undefined;\r",
                      "    pm.expect(promoItem).to.not.be.undefined;\r",
                      "    pm.expect(promoItem.attr('data-price')).to.eq('-2.41');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Allow cookie deletion by going to cookies -> Domain Allowlist",
                      "const jar = pm.cookies.jar();",
                      "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {",
                      "    if (error) {",
                      "        console.log(error.message)",
                      "    }",
                      "});",
                      "jar.set(pm.environment.get('host'), 'sgWebView', '0', function (error) {",
                      "    if (error) {",
                      "        console.log(error.message)",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "user-agent": true
                }
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "Postman/Runtime libshopgate",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}",
                  "host": [
                    "{{sw_endpoint_frontend}}"
                  ],
                  "path": [
                    "sgwebcheckout",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{gen_login_token}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Frontend login",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{sw_endpoint_frontend}}/sgwebcheckout/login?token={{gen_login_token}}",
                      "host": [
                        "{{sw_endpoint_frontend}}"
                      ],
                      "path": [
                        "sgwebcheckout",
                        "login"
                      ],
                      "query": [
                        {
                          "key": "token",
                          "value": "{{gen_login_token}}"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "html",
                  "header": [
                    {
                      "key": "Date",
                      "value": "Mon, 28 Mar 2022 10:00:05 GMT"
                    },
                    {
                      "key": "Server",
                      "value": "Apache/2.4.46 (Unix) OpenSSL/1.0.2u PHP/7.4.12 mod_wsgi/3.5 Python/2.7.13 mod_fastcgi/mod_fastcgi-SNAP-0910052141 mod_perl/2.0.11 Perl/v5.30.1"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "PHP/7.4.12"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "session-=1cscrpqsidkphomnfmdn5q96bc; path=/; HttpOnly; SameSite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "sf_redirect=deleted; expires=Sun, 28-Mar-2021 10:00:13 GMT; Max-Age=0; path=/; httponly"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.configure]=4448c72c00d853284d9beff8.N_tQl_9mmSwI7Sut7MLW5zclfAPcrogQR4LLp7EmB7k.ZMkgwswA1ENmmhv1oLKcoEZpUWWKx_4lC-Sjn_xXd-hArjnYhQr8XWS5Yg; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.account.addressbook]=7d9c3b712fc12dfb003baf6f4.-D_AGO0RWiWAIsl4_o1qtD1R2g7VoxfNnM81BVQp3QI.mnWIKqomEHX1QIwKnNQL_E5niGiF1WKfxYl-UXlliVa2fZF93l8tc-R6nA; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.line-item.change-quantity]=d750593c8667d8dc5b93383.1myVXa_07DB4Y4mxFq72EGFBv__Vp0hOQCZeWetfcKU.pwvPCf23qQQ_AsjpQMmZQQ8Q3saC7TsMDmQvEo8zMojlA94Tl8WeeE0R0A; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.line-item.delete]=5ea1c68f30559255108f25959050a929._5Cmz0bvl4bnzKO7F3OzKDpZidHjlVaxD8mJja9snuc.i9SVlneL2_yJhe7ScDLaTXU905aPzxXwWpC8x-Y03deO3cmQA77Uq4-Z7g; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.checkout.finish.order]=965.YpHY3rFSoHnWYiHlt25UP_e-MkKxcTyePWxI-LC3Nfk.Mua9jsIx0DuOOn6J1RcfRbLpAXaEElrGECAPgtHQVsEE54nm4SjCTrhbEQ; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Set-Cookie",
                      "value": "csrf[frontend.store-api.proxy]=c.oMJ-AT2lk7aGbw-IzybVfR35lcoHnXUd3-XNeqVA4Fs.__UPQkrPp_XCCl7ggmeRF26mzJp1yztLu4KpDckQpTXIpDU3C87l_-8GZA; path=/; httponly; samesite=lax"
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache, private"
                    },
                    {
                      "key": "Access-Control-Allow-Origin",
                      "value": "*"
                    },
                    {
                      "key": "Access-Control-Allow-Methods",
                      "value": "GET,POST,PUT,PATCH,DELETE"
                    },
                    {
                      "key": "Access-Control-Allow-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "Access-Control-Expose-Headers",
                      "value": "Content-Type,Authorization,sw-context-token,sw-access-key,sw-language-id,sw-version-id,sw-inheritance,fail-on-error,indexing-behavior,single-operation,sw-include-seo-urls"
                    },
                    {
                      "key": "X-Frame-Options",
                      "value": "deny"
                    },
                    {
                      "key": "X-Content-Type-Options",
                      "value": "nosniff"
                    },
                    {
                      "key": "Referrer-Policy",
                      "value": "strict-origin-when-cross-origin"
                    },
                    {
                      "key": "X-Debug-Token",
                      "value": "f64d0a"
                    },
                    {
                      "key": "X-Debug-Token-Link",
                      "value": "http://localhost:7777/_profiler/f64d0a"
                    },
                    {
                      "key": "X-Robots-Tag",
                      "value": "noindex"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5, max=96"
                    },
                    {
                      "key": "Connection",
                      "value": "Keep-Alive"
                    },
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/html; charset=UTF-8"
                    }
                  ],
                  "cookie": [],
                  "body": "<!DOCTYPE html>\n<html lang=\"en-GB\"\n      itemscope=\"itemscope\"\n      itemtype=\"https://schema.org/WebPage\">\n    <head>\n    </head>\n    <body class=\"is-ctl-checkout is-act-confirmpage\">\n        <header class=\"header-minimal\">\n        </header>\n        <main class=\"content-main\">\n            <div class=\"container\">\n                <div class=\"container-main\">\n                    <div class=\"checkout\">\n                        <div class=\"checkout-container\">\n                            <div class=\"checkout-main\">\n                                 <h1 class=\"confirm-main-header\">Complete order </h1>\n                                <div class=\"d-none hidden-line-items-information\"\n         data-currency=\"EUR\"\n         data-shipping=\"5.5\"\n         data-value=\"1493.35\"\n         data-tax=\"238.44\"\n    >\n                                    <span class=\"hidden-line-item\"\n                      data-id=\"5c5ad48ee35a441d8057ae7433f840a2\"\n                      data-name=\"Main product\"\n                      data-quantity=\"3\"\n                      data-price=\"495.95\">\n                </span>\n                                </div>\n                            </div>\n                            <div class=\"checkout-aside \">\n                                <div class=\"checkout-aside-container\">\n                                    <div class=\"checkout-aside-summary\">\n                                        <h2 class=\"checkout-aside-summary-header\">\n                                                    Summary\n                                                </h2>\n                                        <div class=\"checkout-aside-summary-list-container\">\n                                            <div class=\"checkout-aside-summary-container\">\n                                                <dl class=\"row checkout-aside-summary-list no-gutters \">\n                                                    <dt class=\"col-7 checkout-aside-summary-label\">\n            Total\n        </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value\">\n            €1,487.85*\n        </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label\">\n                    Shipping costs\n                </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value\">\n                    €5.50*\n                </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label checkout-aside-summary-total\">\n            Grand total\n        </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value checkout-aside-summary-total\">\n            €1,493.35*        </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label summary-net\">\n            Net total\n        </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value summary-net\">\n            €1,254.91\n        </dd>\n                                                    <dt class=\"col-7 checkout-aside-summary-label summary-tax\">\n                    plus 19% VAT\n                </dt>\n                                                    <dd class=\"col-5 checkout-aside-summary-value summary-tax\">\n                    €238.44\n                </dd>\n                                                </dl>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"checkout-aside-action\">\n                                        <form id=\"confirmOrderForm\"\n              action=\"/checkout/order\"\n              data-form-csrf-handler=\"true\"\n              data-form-preserver=\"true\"\n              data-form-submit-loader=\"true\"\n              method=\"post\">\n                                            <input type=\"hidden\" name=\"_csrf_token\" value=\"965.YpHY3rFSoHnWYiHlt25UP_e-MkKxcTyePWxI-LC3Nfk.Mua9jsIx0DuOOn6J1RcfRbLpAXaEElrGECAPgtHQVsEE54nm4SjCTrhbEQ\">\n                                            <button id=\"confirmFormSubmit\"\n                        class=\"btn btn-primary btn-block btn-lg\"\n                        form=\"confirmOrderForm\"\n                                            type=\"submit\">\n                    Submit order\n                </button>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer class=\"footer-minimal\">\n        </footer>\n</body>\n</html>"
                }
              ]
            }
          ],
          "description": "Any tests related to Is Shopgate WebC check"
        }
      ]
    },
    {
      "name": "SG-207 React Native Base",
      "item": [
        {
          "name": "Old app - Apple",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Load the HTML response to $\r",
                  "const pkg = require('cheerio')\r",
                  "const $ = pkg.load(pm.response.text());\r",
                  "\r",
                  "pm.test(\"Check we redirected to register page\", function () {\r",
                  "    const bodyClass = $('.is-ctl-auth.is-act-loginpage.is-sg-app.is-sg-codebase-v1');\r",
                  "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                  "const jar = pm.cookies.jar();\r",
                  "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                  "    if (error) {\r",
                  "        console.log(error.message)\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 16_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (Shopgate Standalone 10.75.0 Codebase:10.75.0 NOAPPLEPAY)",
                "description": "Apple old WebC version",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_endpoint_frontend}}/account/login",
              "host": [
                "{{sw_endpoint_frontend}}"
              ],
              "path": [
                "account",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Old app - Android",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Load the HTML response to $\r",
                  "const pkg = require('cheerio')\r",
                  "const $ = pkg.load(pm.response.text());\r",
                  "\r",
                  "pm.test(\"Check we redirected to register page\", function () {\r",
                  "    const bodyClass = $('.is-ctl-auth.is-act-loginpage.is-sg-app.is-sg-codebase-v1');\r",
                  "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                  "const jar = pm.cookies.jar();\r",
                  "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                  "    if (error) {\r",
                  "        console.log(error.message)\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/120.0.6099.230 Mobile Safari/537.36 libshopgate/25.0 (Shopgate 5.43.0 Codebase:5.43.0) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Bowling Shop Berlin 24 5.58.0 Codebase:5.58.0)",
                "description": "Android old WebC version",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_endpoint_frontend}}/account/login",
              "host": [
                "{{sw_endpoint_frontend}}"
              ],
              "path": [
                "account",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Native App",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Load the HTML response to $\r",
                  "const pkg = require('cheerio')\r",
                  "const $ = pkg.load(pm.response.text());\r",
                  "\r",
                  "pm.test(\"Check we redirected to register page\", function () {\r",
                  "    const bodyClass = $('.is-ctl-auth.is-act-loginpage.is-sg-app.is-sg-codebase-v2');\r",
                  "    pm.expect(bodyClass).to.be.lengthOf(1);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                  "const jar = pm.cookies.jar();\r",
                  "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                  "    if (error) {\r",
                  "        console.log(error.message)\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
                "description": "New WebC version",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{sw_endpoint_frontend}}/account/login",
              "host": [
                "{{sw_endpoint_frontend}}"
              ],
              "path": [
                "account",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "No app",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Load the HTML response to $\r",
                  "const pkg = require('cheerio')\r",
                  "const $ = pkg.load(pm.response.text());\r",
                  "\r",
                  "pm.test(\"Check we redirected to register page\", function () {\r",
                  "    const bodyClass = $('.is-ctl-auth.is-act-loginpage.is-sg-app')\r",
                  "    pm.expect(bodyClass).to.be.lengthOf(0);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Allow cookie deletion by going to cookies -> Domain Allowlist\r",
                  "const jar = pm.cookies.jar();\r",
                  "jar.unset(pm.environment.get(\"host\"), 'session-', function (error) {\r",
                  "    if (error) {\r",
                  "        console.log(error.message)\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{sw_endpoint_frontend}}/account/login",
              "host": [
                "{{sw_endpoint_frontend}}"
              ],
              "path": [
                "account",
                "login"
              ]
            }
          },
          "response": []
        }
      ],
      "description": "Newer app does not need header padding-top setting. We will need to remove it when the Shopgate `Codebase` in the User-Agent is more than 11"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "sw-access-key",
        "type": "string"
      },
      {
        "key": "value",
        "value": "{{gen_accessKey}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "/**",
          " * SW Token generation",
          " */",
          "var getToken = true;",
          "if (!pm.environment.get('gen_token_expires') || !pm.environment.get('gen_access_token')) {",
          "    console.log('Token or expiry date are missing');",
          "} else if (pm.environment.get('gen_token_expires') <= (new Date()).getTime()) {",
          "    console.log('Token is expired');",
          "} else {",
          "    getToken = false;",
          "}",
          "",
          "if (getToken === true) {",
          "    const createRequest = {",
          "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
          "        \"grant_type\": \"password\",",
          "        \"scopes\": \"write\",",
          "        \"username\": pm.environment.get(\"sw_admin\"),",
          "        \"password\": pm.environment.get(\"sw_pass\")",
          "    };",
          "    const refreshRequest = {",
          "        \"grant_type\": \"refresh_token\",",
          "        \"client_id\": pm.environment.get(\"sw_client_id\"),",
          "        \"refresh_token\": pm.environment.get(\"gen_refresh_token\")",
          "    };",
          "    // SW Auth",
          "    const authRequest = {",
          "        url: pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_auth\"))),",
          "        method: 'POST',",
          "        header: 'Accept: application/json\\nContent-Type: application/json; charset=utf-8',",
          "        body: {",
          "            mode: 'application/json'",
          "        }",
          "    };",
          "    // set body depending on type of request needed",
          "    authRequest.body.raw = JSON.stringify(pm.environment.get(\"gen_refresh_token\") ? refreshRequest : createRequest);",
          "    pm.sendRequest(authRequest, function (err, res) {",
          "        if (res.code !== 200) {",
          "            pm.environment.unset('gen_access_token');",
          "            pm.environment.unset('gen_token_expires');",
          "            pm.environment.unset('gen_refresh_token');",
          "            console.log('Invalidated refresh token');",
          "            return;",
          "        }",
          "        ",
          "        var responseJson = res.json();",
          "        pm.environment.set('gen_access_token', responseJson.access_token)",
          "",
          "        var expiryDate = new Date();",
          "        expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
          "        pm.environment.set('gen_token_expires', expiryDate.getTime());",
          "        pm.environment.set('gen_refresh_token', responseJson.refresh_token);",
          "        console.log('Saved the token and expiry date');",
          "    });",
          "}",
          "",
          "Utility = {};",
          "// JSON handlers",
          "Utility.getByLabel = (list, value) => getItemByKey(list, 'label', value);",
          "Utility.getByName = (list, value) => getItemByKey(list, 'name', value);",
          "Utility.getByCode = (list, value) => getItemByKey(list, 'code', value);",
          "Utility.getById = (list, value, strict = true) => getItemByKey(list, 'id', value, strict);",
          "Utility.getByItemNumber = (list, value) => getItemByKey(list, 'item_number', value);",
          "function getItemByKey(list, key, value, strict = true) {",
          "    return list.find(item => strict ? item[key] === value : item[key].includes(value));",
          "};",
          "",
          "",
          "// Version functionality",
          "// NB! does not handle ‘1.0.0-alpha’ < ‘1.0.0’ cases",
          "Utility.version = {};",
          "const padVersion = (version) => {",
          "    version = version.split('-')[0];  // Strip parts after dash",
          "    return version.split('.').map(part => part.padStart(10, '0')).join('.');",
          "}",
          "const versionCompare = (a, b) => padVersion(a).localeCompare(padVersion(b), undefined, { numeric: true, sensitivity: 'base' });",
          "Utility.version.isLT = (a, b) => versionCompare(a, b) < 0;",
          "Utility.version.isGT = (a, b) => versionCompare(a, b) > 0;",
          "Utility.version.isGTE = (a, b) => versionCompare(a, b) >= 0;"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// remove generated token data if not authorized",
          "if (pm.response.code === 401) {",
          "    console.log('Removing tokens due to 401 response. Please try again.');",
          "    pm.environment.unset('gen_access_token');",
          "    pm.environment.unset('gen_token_expires');",
          "    pm.environment.unset('gen_refresh_token');",
          "}"
        ]
      }
    }
  ]
}
